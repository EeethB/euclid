// Generated by cpp11: do not edit by hand
// clang-format off

#include "euclid_types.h"
#include "cpp11/declarations.hpp"

// bbox.cpp
bbox2_p create_bbox_2(cpp11::doubles xmin, cpp11::doubles ymin, cpp11::doubles xmax, cpp11::doubles ymax);
extern "C" SEXP _euclid_create_bbox_2(SEXP xmin, SEXP ymin, SEXP xmax, SEXP ymax) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_bbox_2(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(xmin), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ymin), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(xmax), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ymax)));
  END_CPP11
}
// bbox.cpp
bbox3_p create_bbox_3(cpp11::doubles xmin, cpp11::doubles ymin, cpp11::doubles zmin, cpp11::doubles xmax, cpp11::doubles ymax, cpp11::doubles zmax);
extern "C" SEXP _euclid_create_bbox_3(SEXP xmin, SEXP ymin, SEXP zmin, SEXP xmax, SEXP ymax, SEXP zmax) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_bbox_3(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(xmin), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ymin), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(zmin), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(xmax), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ymax), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(zmax)));
  END_CPP11
}
// bbox.cpp
int bbox_length(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_length(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_length(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
int bbox_dimension(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_dimension(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_dimension(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_subset(bbox_vector_base_p bboxes, cpp11::integers index);
extern "C" SEXP _euclid_bbox_subset(SEXP bboxes, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_subset(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_copy(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_copy(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_copy(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_assign(bbox_vector_base_p bboxes, cpp11::integers index, bbox_vector_base_p value);
extern "C" SEXP _euclid_bbox_assign(SEXP bboxes, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_assign(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(value)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_combine(bbox_vector_base_p bboxes, cpp11::list_of< bbox_vector_base_p > extra);
extern "C" SEXP _euclid_bbox_combine(SEXP bboxes, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_combine(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of< bbox_vector_base_p >>>(extra)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_unique(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_unique(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_unique(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::logicals bbox_duplicated(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_duplicated(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_duplicated(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::integers bbox_any_duplicated(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_any_duplicated(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_any_duplicated(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::integers bbox_match(bbox_vector_base_p bboxes, bbox_vector_base_p table);
extern "C" SEXP _euclid_bbox_match(SEXP bboxes, SEXP table) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_match(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(table)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::logicals bbox_is_na(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_is_na(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_is_na(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
bool bbox_any_na(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_any_na(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_any_na(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::doubles_matrix bbox_to_matrix(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_to_matrix(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_to_matrix(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::strings bbox_format(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_format(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_format(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::logicals bbox_is_equal(bbox_vector_base_p bboxes1, bbox_vector_base_p bboxes2);
extern "C" SEXP _euclid_bbox_is_equal(SEXP bboxes1, SEXP bboxes2) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_is_equal(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes1), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes2)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::logicals bbox_is_not_equal(bbox_vector_base_p bboxes1, bbox_vector_base_p bboxes2);
extern "C" SEXP _euclid_bbox_is_not_equal(SEXP bboxes1, SEXP bboxes2) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_is_not_equal(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes1), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes2)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_plus(bbox_vector_base_p bboxes, bbox_vector_base_p other);
extern "C" SEXP _euclid_bbox_plus(SEXP bboxes, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_plus(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(other)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_sum(bbox_vector_base_p bboxes, bool na_rm);
extern "C" SEXP _euclid_bbox_sum(SEXP bboxes, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_sum(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// bbox.cpp
bbox_vector_base_p bbox_cumsum(bbox_vector_base_p bboxes);
extern "C" SEXP _euclid_bbox_cumsum(SEXP bboxes) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_cumsum(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes)));
  END_CPP11
}
// bbox.cpp
cpp11::writable::logicals bbox_overlaps(bbox_vector_base_p bboxes1, bbox_vector_base_p bboxes2);
extern "C" SEXP _euclid_bbox_overlaps(SEXP bboxes1, SEXP bboxes2) {
  BEGIN_CPP11
    return cpp11::as_sexp(bbox_overlaps(cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes1), cpp11::as_cpp<cpp11::decay_t<bbox_vector_base_p>>(bboxes2)));
  END_CPP11
}
// circle.cpp
circle2_p create_circle_2_empty();
extern "C" SEXP _euclid_create_circle_2_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_circle_2_empty());
  END_CPP11
}
// circle.cpp
circle2_p create_circle_2_center_radius(point2_p center, exact_numeric_p r);
extern "C" SEXP _euclid_create_circle_2_center_radius(SEXP center, SEXP r) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_circle_2_center_radius(cpp11::as_cpp<cpp11::decay_t<point2_p>>(center), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(r)));
  END_CPP11
}
// circle.cpp
circle2_p create_circle_2_3_point(point2_p p, point2_p q, point2_p r);
extern "C" SEXP _euclid_create_circle_2_3_point(SEXP p, SEXP q, SEXP r) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_circle_2_3_point(cpp11::as_cpp<cpp11::decay_t<point2_p>>(p), cpp11::as_cpp<cpp11::decay_t<point2_p>>(q), cpp11::as_cpp<cpp11::decay_t<point2_p>>(r)));
  END_CPP11
}
// circle.cpp
circle2_p create_circle_2_2_point(point2_p p, point2_p q);
extern "C" SEXP _euclid_create_circle_2_2_point(SEXP p, SEXP q) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_circle_2_2_point(cpp11::as_cpp<cpp11::decay_t<point2_p>>(p), cpp11::as_cpp<cpp11::decay_t<point2_p>>(q)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p create_exact_numeric(cpp11::doubles numeric);
extern "C" SEXP _euclid_create_exact_numeric(SEXP numeric) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_exact_numeric(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(numeric)));
  END_CPP11
}
// exact_numeric.cpp
int exact_numeric_length(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_length(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_length(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_subset(exact_numeric_p ex_n, cpp11::integers index);
extern "C" SEXP _euclid_exact_numeric_subset(SEXP ex_n, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_subset(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_assign(exact_numeric_p ex_n, cpp11::integers index, exact_numeric_p value);
extern "C" SEXP _euclid_exact_numeric_assign(SEXP ex_n, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_assign(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(value)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_combine(exact_numeric_p ex_n, cpp11::list_of<exact_numeric_p> extra);
extern "C" SEXP _euclid_exact_numeric_combine(SEXP ex_n, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_combine(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<exact_numeric_p>>>(extra)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_is_na(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_is_na(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_is_na(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
bool exact_numeric_any_na(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_any_na(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_any_na(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::doubles exact_numeric_to_numeric(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_to_numeric(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_to_numeric(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_is_equal(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_is_equal(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_is_equal(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_is_not_equal(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_is_not_equal(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_is_not_equal(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_less(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_less(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_less(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_less_equal(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_less_equal(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_less_equal(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_greater(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_greater(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_greater(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_greater_equal(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_greater_equal(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_greater_equal(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_unique(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_unique(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_unique(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::logicals exact_numeric_duplicated(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_duplicated(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_duplicated(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
int exact_numeric_any_duplicated(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_any_duplicated(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_any_duplicated(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::integers exact_numeric_rank(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_rank(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_rank(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::integers exact_numeric_match(exact_numeric_p ex_n, exact_numeric_p table);
extern "C" SEXP _euclid_exact_numeric_match(SEXP ex_n, SEXP table) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_match(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(table)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_plus(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_plus(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_plus(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_minus(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_minus(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_minus(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_uni_minus(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_uni_minus(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_uni_minus(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_times(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_times(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_times(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_divided(exact_numeric_p ex_n, exact_numeric_p ex_n2);
extern "C" SEXP _euclid_exact_numeric_divided(SEXP ex_n, SEXP ex_n2) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_divided(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n2)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_abs(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_abs(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_abs(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
cpp11::writable::integers exact_numeric_sign(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_sign(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_sign(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_cumsum(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_cumsum(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_cumsum(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_cumprod(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_cumprod(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_cumprod(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_cummax(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_cummax(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_cummax(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_cummin(exact_numeric_p ex_n);
extern "C" SEXP _euclid_exact_numeric_cummin(SEXP ex_n) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_cummin(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_diff(exact_numeric_p ex_n, int lag);
extern "C" SEXP _euclid_exact_numeric_diff(SEXP ex_n, SEXP lag) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_diff(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<int>>(lag)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_sort(exact_numeric_p ex_n, bool decreasing, cpp11::logicals na_last);
extern "C" SEXP _euclid_exact_numeric_sort(SEXP ex_n, SEXP decreasing, SEXP na_last) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_sort(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<bool>>(decreasing), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(na_last)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_sum(exact_numeric_p ex_n, bool na_rm);
extern "C" SEXP _euclid_exact_numeric_sum(SEXP ex_n, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_sum(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_prod(exact_numeric_p ex_n, bool na_rm);
extern "C" SEXP _euclid_exact_numeric_prod(SEXP ex_n, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_prod(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_min(exact_numeric_p ex_n, bool na_rm);
extern "C" SEXP _euclid_exact_numeric_min(SEXP ex_n, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_min(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// exact_numeric.cpp
exact_numeric_p exact_numeric_max(exact_numeric_p ex_n, bool na_rm);
extern "C" SEXP _euclid_exact_numeric_max(SEXP ex_n, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(exact_numeric_max(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(ex_n), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// geometry_common.cpp
int geometry_length(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_length(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_length(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
int geometry_dimension(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_dimension(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_dimension(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::strings geometry_definition_names(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_definition_names(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_definition_names(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
exact_numeric_p geometry_definition(geometry_vector_base_p geometries, int which, cpp11::integers element);
extern "C" SEXP _euclid_geometry_definition(SEXP geometries, SEXP which, SEXP element) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_definition(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<int>>(which), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(element)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::integers geometry_cardinality(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_cardinality(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_cardinality(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_subset(geometry_vector_base_p geometries, cpp11::integers index);
extern "C" SEXP _euclid_geometry_subset(SEXP geometries, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_subset(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_copy(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_copy(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_copy(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_assign(geometry_vector_base_p geometries, cpp11::integers index, geometry_vector_base_p value);
extern "C" SEXP _euclid_geometry_assign(SEXP geometries, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_assign(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(value)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_combine(geometry_vector_base_p geometries, cpp11::list_of< geometry_vector_base_p > extra);
extern "C" SEXP _euclid_geometry_combine(SEXP geometries, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_combine(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of< geometry_vector_base_p >>>(extra)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_unique(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_unique(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_unique(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::logicals geometry_duplicated(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_duplicated(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::integers geometry_any_duplicated(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_any_duplicated(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_any_duplicated(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::integers geometry_match(geometry_vector_base_p geometries, geometry_vector_base_p table);
extern "C" SEXP _euclid_geometry_match(SEXP geometries, SEXP table) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_match(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(table)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::logicals geometry_is_na(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_is_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_is_na(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
bool geometry_any_na(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_any_na(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_any_na(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::doubles_matrix geometry_to_matrix(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_to_matrix(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_to_matrix(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::strings geometry_format(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_format(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_format(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::logicals geometry_is_equal(geometry_vector_base_p geometries1, geometry_vector_base_p geometries2);
extern "C" SEXP _euclid_geometry_is_equal(SEXP geometries1, SEXP geometries2) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_is_equal(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries1), cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries2)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::logicals geometry_is_not_equal(geometry_vector_base_p geometries1, geometry_vector_base_p geometries2);
extern "C" SEXP _euclid_geometry_is_not_equal(SEXP geometries1, SEXP geometries2) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_is_not_equal(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries1), cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries2)));
  END_CPP11
}
// geometry_common.cpp
cpp11::writable::logicals geometry_is_degenerate(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_is_degenerate(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_is_degenerate(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// geometry_common.cpp
geometry_vector_base_p geometry_transform(geometry_vector_base_p geometries, transform_vector_base_p affine);
extern "C" SEXP _euclid_geometry_transform(SEXP geometries, SEXP affine) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_transform(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(affine)));
  END_CPP11
}
// geometry_common.cpp
bbox_vector_base_p geometry_bbox(geometry_vector_base_p geometries);
extern "C" SEXP _euclid_geometry_bbox(SEXP geometries) {
  BEGIN_CPP11
    return cpp11::as_sexp(geometry_bbox(cpp11::as_cpp<cpp11::decay_t<geometry_vector_base_p>>(geometries)));
  END_CPP11
}
// point.cpp
point2_p create_point_2_empty();
extern "C" SEXP _euclid_create_point_2_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_2_empty());
  END_CPP11
}
// point.cpp
point2_p create_point_2_x_y(exact_numeric_p x, exact_numeric_p y);
extern "C" SEXP _euclid_create_point_2_x_y(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_2_x_y(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// point.cpp
point2_p create_point_2_vec(vector2_p p);
extern "C" SEXP _euclid_create_point_2_vec(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_2_vec(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(p)));
  END_CPP11
}
// point.cpp
point2_p point_2_add_vector(point2_p x, vector2_p y);
extern "C" SEXP _euclid_point_2_add_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_add_vector(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector2_p>>(y)));
  END_CPP11
}
// point.cpp
point2_p point_2_sub_vector(point2_p x, vector2_p y);
extern "C" SEXP _euclid_point_2_sub_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_sub_vector(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector2_p>>(y)));
  END_CPP11
}
// point.cpp
vector2_p point_2_sub_point(point2_p x, point2_p y);
extern "C" SEXP _euclid_point_2_sub_point(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_sub_point(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<point2_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_2_less(point2_p x, point2_p y);
extern "C" SEXP _euclid_point_2_less(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_less(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<point2_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_2_less_equal(point2_p x, point2_p y);
extern "C" SEXP _euclid_point_2_less_equal(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_less_equal(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<point2_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_2_greater(point2_p x, point2_p y);
extern "C" SEXP _euclid_point_2_greater(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_greater(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<point2_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_2_greater_equal(point2_p x, point2_p y);
extern "C" SEXP _euclid_point_2_greater_equal(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_greater_equal(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<point2_p>>(y)));
  END_CPP11
}
// point.cpp
exact_numeric_p point_2_coord(point2_p x, int i);
extern "C" SEXP _euclid_point_2_coord(SEXP x, SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_coord(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(i)));
  END_CPP11
}
// point.cpp
point2_p point_2_sort(point2_p x, bool decreasing, cpp11::logicals na_last);
extern "C" SEXP _euclid_point_2_sort(SEXP x, SEXP decreasing, SEXP na_last) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_sort(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(decreasing), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(na_last)));
  END_CPP11
}
// point.cpp
cpp11::writable::integers point_2_rank(point2_p x);
extern "C" SEXP _euclid_point_2_rank(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_rank(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x)));
  END_CPP11
}
// point.cpp
point2_p point_2_min(point2_p x, bool na_rm);
extern "C" SEXP _euclid_point_2_min(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_min(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// point.cpp
point2_p point_2_max(point2_p x, bool na_rm);
extern "C" SEXP _euclid_point_2_max(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_max(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// point.cpp
point2_p point_2_cummin(point2_p x);
extern "C" SEXP _euclid_point_2_cummin(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_cummin(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x)));
  END_CPP11
}
// point.cpp
point2_p point_2_cummax(point2_p x);
extern "C" SEXP _euclid_point_2_cummax(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_2_cummax(cpp11::as_cpp<cpp11::decay_t<point2_p>>(x)));
  END_CPP11
}
// point.cpp
point3_p create_point_3_empty();
extern "C" SEXP _euclid_create_point_3_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_3_empty());
  END_CPP11
}
// point.cpp
point3_p create_point_3_x_y_z(exact_numeric_p x, exact_numeric_p y, exact_numeric_p z);
extern "C" SEXP _euclid_create_point_3_x_y_z(SEXP x, SEXP y, SEXP z) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_3_x_y_z(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(z)));
  END_CPP11
}
// point.cpp
point3_p create_point_3_vec(vector3_p p);
extern "C" SEXP _euclid_create_point_3_vec(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_point_3_vec(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(p)));
  END_CPP11
}
// point.cpp
point3_p point_3_add_vector(point3_p x, vector3_p y);
extern "C" SEXP _euclid_point_3_add_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_add_vector(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector3_p>>(y)));
  END_CPP11
}
// point.cpp
point3_p point_3_sub_vector(point3_p x, vector3_p y);
extern "C" SEXP _euclid_point_3_sub_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_sub_vector(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector3_p>>(y)));
  END_CPP11
}
// point.cpp
vector3_p point_3_sub_point(point3_p x, point3_p y);
extern "C" SEXP _euclid_point_3_sub_point(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_sub_point(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<point3_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_3_less(point3_p x, point3_p y);
extern "C" SEXP _euclid_point_3_less(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_less(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<point3_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_3_less_equal(point3_p x, point3_p y);
extern "C" SEXP _euclid_point_3_less_equal(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_less_equal(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<point3_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_3_greater(point3_p x, point3_p y);
extern "C" SEXP _euclid_point_3_greater(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_greater(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<point3_p>>(y)));
  END_CPP11
}
// point.cpp
cpp11::writable::logicals point_3_greater_equal(point3_p x, point3_p y);
extern "C" SEXP _euclid_point_3_greater_equal(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_greater_equal(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<point3_p>>(y)));
  END_CPP11
}
// point.cpp
exact_numeric_p point_3_coord(point3_p x, int i);
extern "C" SEXP _euclid_point_3_coord(SEXP x, SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_coord(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(i)));
  END_CPP11
}
// point.cpp
point3_p point_3_sort(point3_p x, bool decreasing, cpp11::logicals na_last);
extern "C" SEXP _euclid_point_3_sort(SEXP x, SEXP decreasing, SEXP na_last) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_sort(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(decreasing), cpp11::as_cpp<cpp11::decay_t<cpp11::logicals>>(na_last)));
  END_CPP11
}
// point.cpp
cpp11::writable::integers point_3_rank(point3_p x);
extern "C" SEXP _euclid_point_3_rank(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_rank(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x)));
  END_CPP11
}
// point.cpp
point3_p point_3_min(point3_p x, bool na_rm);
extern "C" SEXP _euclid_point_3_min(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_min(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// point.cpp
point3_p point_3_max(point3_p x, bool na_rm);
extern "C" SEXP _euclid_point_3_max(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_max(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// point.cpp
point3_p point_3_cummin(point3_p x);
extern "C" SEXP _euclid_point_3_cummin(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_cummin(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x)));
  END_CPP11
}
// point.cpp
point3_p point_3_cummax(point3_p x);
extern "C" SEXP _euclid_point_3_cummax(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(point_3_cummax(cpp11::as_cpp<cpp11::decay_t<point3_p>>(x)));
  END_CPP11
}
// transform.cpp
transform2_p create_transform_2_identity(int n);
extern "C" SEXP _euclid_create_transform_2_identity(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_2_identity(cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// transform.cpp
transform2_p create_transform_2_matrix(cpp11::list_of<cpp11::doubles_matrix> matrices);
extern "C" SEXP _euclid_create_transform_2_matrix(SEXP matrices) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_2_matrix(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::doubles_matrix>>>(matrices)));
  END_CPP11
}
// transform.cpp
transform2_p create_transform_2_translate(vector2_p trans);
extern "C" SEXP _euclid_create_transform_2_translate(SEXP trans) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_2_translate(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(trans)));
  END_CPP11
}
// transform.cpp
transform2_p create_transform_2_rotate(exact_numeric_p rho);
extern "C" SEXP _euclid_create_transform_2_rotate(SEXP rho) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_2_rotate(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(rho)));
  END_CPP11
}
// transform.cpp
transform2_p create_transform_2_scale(exact_numeric_p fac);
extern "C" SEXP _euclid_create_transform_2_scale(SEXP fac) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_2_scale(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(fac)));
  END_CPP11
}
// transform.cpp
transform3_p create_transform_3_identity(int n);
extern "C" SEXP _euclid_create_transform_3_identity(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_3_identity(cpp11::as_cpp<cpp11::decay_t<int>>(n)));
  END_CPP11
}
// transform.cpp
transform3_p create_transform_3_matrix(cpp11::list_of<cpp11::doubles_matrix> matrices);
extern "C" SEXP _euclid_create_transform_3_matrix(SEXP matrices) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_3_matrix(cpp11::as_cpp<cpp11::decay_t<cpp11::list_of<cpp11::doubles_matrix>>>(matrices)));
  END_CPP11
}
// transform.cpp
transform3_p create_transform_3_translate(vector3_p trans);
extern "C" SEXP _euclid_create_transform_3_translate(SEXP trans) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_3_translate(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(trans)));
  END_CPP11
}
// transform.cpp
transform3_p create_transform_3_scale(exact_numeric_p fac);
extern "C" SEXP _euclid_create_transform_3_scale(SEXP fac) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_transform_3_scale(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(fac)));
  END_CPP11
}
// transform.cpp
int transform_length(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_length(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_length(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
int transform_dimension(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_dimension(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_dimension(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
exact_numeric_p transform_definition(transform_vector_base_p transforms, cpp11::integers i, cpp11::integers j);
extern "C" SEXP _euclid_transform_definition(SEXP transforms, SEXP i, SEXP j) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_definition(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(i), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(j)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_subset(transform_vector_base_p transforms, cpp11::integers index);
extern "C" SEXP _euclid_transform_subset(SEXP transforms, SEXP index) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_subset(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_copy(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_copy(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_copy(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_assign(transform_vector_base_p transforms, cpp11::integers index, transform_vector_base_p value);
extern "C" SEXP _euclid_transform_assign(SEXP transforms, SEXP index, SEXP value) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_assign(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(index), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(value)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_combine(transform_vector_base_p transforms, cpp11::list_of< transform_vector_base_p > extra);
extern "C" SEXP _euclid_transform_combine(SEXP transforms, SEXP extra) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_combine(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<cpp11::list_of< transform_vector_base_p >>>(extra)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_unique(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_unique(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_unique(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::logicals transform_duplicated(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_duplicated(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_duplicated(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::integers transform_any_duplicated(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_any_duplicated(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_any_duplicated(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::integers transform_match(transform_vector_base_p transforms, transform_vector_base_p table);
extern "C" SEXP _euclid_transform_match(SEXP transforms, SEXP table) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_match(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(table)));
  END_CPP11
}
// transform.cpp
cpp11::writable::logicals transform_is_na(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_is_na(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_is_na(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
bool transform_any_na(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_any_na(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_any_na(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::doubles transform_to_array(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_to_array(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_to_array(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::strings transform_format(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_format(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_format(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::logicals transform_is_equal(transform_vector_base_p transforms1, transform_vector_base_p transforms2);
extern "C" SEXP _euclid_transform_is_equal(SEXP transforms1, SEXP transforms2) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_is_equal(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms1), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms2)));
  END_CPP11
}
// transform.cpp
cpp11::writable::logicals transform_is_not_equal(transform_vector_base_p transforms1, transform_vector_base_p transforms2);
extern "C" SEXP _euclid_transform_is_not_equal(SEXP transforms1, SEXP transforms2) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_is_not_equal(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms1), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms2)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_multiply(transform_vector_base_p transforms, transform_vector_base_p other);
extern "C" SEXP _euclid_transform_multiply(SEXP transforms, SEXP other) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_multiply(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(other)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_inverse(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_inverse(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_inverse(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
cpp11::writable::logicals transform_is_reflecting(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_is_reflecting(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_is_reflecting(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_prod(transform_vector_base_p transforms, bool na_rm);
extern "C" SEXP _euclid_transform_prod(SEXP transforms, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_prod(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// transform.cpp
transform_vector_base_p transform_cumprod(transform_vector_base_p transforms);
extern "C" SEXP _euclid_transform_cumprod(SEXP transforms) {
  BEGIN_CPP11
    return cpp11::as_sexp(transform_cumprod(cpp11::as_cpp<cpp11::decay_t<transform_vector_base_p>>(transforms)));
  END_CPP11
}
// vector.cpp
vector2_p create_vector_2_empty();
extern "C" SEXP _euclid_create_vector_2_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_2_empty());
  END_CPP11
}
// vector.cpp
vector2_p create_vector_2_point(point2_p p);
extern "C" SEXP _euclid_create_vector_2_point(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_2_point(cpp11::as_cpp<cpp11::decay_t<point2_p>>(p)));
  END_CPP11
}
// vector.cpp
vector2_p create_vector_2_x_y(exact_numeric_p x, exact_numeric_p y);
extern "C" SEXP _euclid_create_vector_2_x_y(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_2_x_y(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_add_vector(vector2_p x, vector2_p y);
extern "C" SEXP _euclid_vector_2_add_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_add_vector(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector2_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_minus_vector(vector2_p x, vector2_p y);
extern "C" SEXP _euclid_vector_2_minus_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_minus_vector(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector2_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_negate(vector2_p x);
extern "C" SEXP _euclid_vector_2_negate(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_negate(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x)));
  END_CPP11
}
// vector.cpp
exact_numeric_p vector_2_dot_vector(vector2_p x, vector2_p y);
extern "C" SEXP _euclid_vector_2_dot_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_dot_vector(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector2_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_times_numeric(vector2_p x, exact_numeric_p y);
extern "C" SEXP _euclid_vector_2_times_numeric(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_times_numeric(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_divide_numeric(vector2_p x, exact_numeric_p y);
extern "C" SEXP _euclid_vector_2_divide_numeric(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_divide_numeric(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_sum(vector2_p x, bool na_rm);
extern "C" SEXP _euclid_vector_2_sum(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_sum(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// vector.cpp
vector2_p vector_2_cumsum(vector2_p x);
extern "C" SEXP _euclid_vector_2_cumsum(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_cumsum(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x)));
  END_CPP11
}
// vector.cpp
exact_numeric_p vector_2_coord(vector2_p x, int i);
extern "C" SEXP _euclid_vector_2_coord(SEXP x, SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_2_coord(cpp11::as_cpp<cpp11::decay_t<vector2_p>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(i)));
  END_CPP11
}
// vector.cpp
vector3_p create_vector_3_empty();
extern "C" SEXP _euclid_create_vector_3_empty() {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_3_empty());
  END_CPP11
}
// vector.cpp
vector3_p create_vector_3_point(point3_p p);
extern "C" SEXP _euclid_create_vector_3_point(SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_3_point(cpp11::as_cpp<cpp11::decay_t<point3_p>>(p)));
  END_CPP11
}
// vector.cpp
vector3_p create_vector_3_x_y_z(exact_numeric_p x, exact_numeric_p y, exact_numeric_p z);
extern "C" SEXP _euclid_create_vector_3_x_y_z(SEXP x, SEXP y, SEXP z) {
  BEGIN_CPP11
    return cpp11::as_sexp(create_vector_3_x_y_z(cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(z)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_add_vector(vector3_p x, vector3_p y);
extern "C" SEXP _euclid_vector_3_add_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_add_vector(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector3_p>>(y)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_minus_vector(vector3_p x, vector3_p y);
extern "C" SEXP _euclid_vector_3_minus_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_minus_vector(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector3_p>>(y)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_negate(vector3_p x);
extern "C" SEXP _euclid_vector_3_negate(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_negate(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x)));
  END_CPP11
}
// vector.cpp
exact_numeric_p vector_3_dot_vector(vector3_p x, vector3_p y);
extern "C" SEXP _euclid_vector_3_dot_vector(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_dot_vector(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<vector3_p>>(y)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_times_numeric(vector3_p x, exact_numeric_p y);
extern "C" SEXP _euclid_vector_3_times_numeric(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_times_numeric(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_divide_numeric(vector3_p x, exact_numeric_p y);
extern "C" SEXP _euclid_vector_3_divide_numeric(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_divide_numeric(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<exact_numeric_p>>(y)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_sum(vector3_p x, bool na_rm);
extern "C" SEXP _euclid_vector_3_sum(SEXP x, SEXP na_rm) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_sum(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<bool>>(na_rm)));
  END_CPP11
}
// vector.cpp
vector3_p vector_3_cumsum(vector3_p x);
extern "C" SEXP _euclid_vector_3_cumsum(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_cumsum(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x)));
  END_CPP11
}
// vector.cpp
exact_numeric_p vector_3_coord(vector3_p x, int i);
extern "C" SEXP _euclid_vector_3_coord(SEXP x, SEXP i) {
  BEGIN_CPP11
    return cpp11::as_sexp(vector_3_coord(cpp11::as_cpp<cpp11::decay_t<vector3_p>>(x), cpp11::as_cpp<cpp11::decay_t<int>>(i)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _euclid_bbox_any_duplicated(SEXP);
extern SEXP _euclid_bbox_any_na(SEXP);
extern SEXP _euclid_bbox_assign(SEXP, SEXP, SEXP);
extern SEXP _euclid_bbox_combine(SEXP, SEXP);
extern SEXP _euclid_bbox_copy(SEXP);
extern SEXP _euclid_bbox_cumsum(SEXP);
extern SEXP _euclid_bbox_dimension(SEXP);
extern SEXP _euclid_bbox_duplicated(SEXP);
extern SEXP _euclid_bbox_format(SEXP);
extern SEXP _euclid_bbox_is_equal(SEXP, SEXP);
extern SEXP _euclid_bbox_is_na(SEXP);
extern SEXP _euclid_bbox_is_not_equal(SEXP, SEXP);
extern SEXP _euclid_bbox_length(SEXP);
extern SEXP _euclid_bbox_match(SEXP, SEXP);
extern SEXP _euclid_bbox_overlaps(SEXP, SEXP);
extern SEXP _euclid_bbox_plus(SEXP, SEXP);
extern SEXP _euclid_bbox_subset(SEXP, SEXP);
extern SEXP _euclid_bbox_sum(SEXP, SEXP);
extern SEXP _euclid_bbox_to_matrix(SEXP);
extern SEXP _euclid_bbox_unique(SEXP);
extern SEXP _euclid_create_bbox_2(SEXP, SEXP, SEXP, SEXP);
extern SEXP _euclid_create_bbox_3(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
extern SEXP _euclid_create_circle_2_2_point(SEXP, SEXP);
extern SEXP _euclid_create_circle_2_3_point(SEXP, SEXP, SEXP);
extern SEXP _euclid_create_circle_2_center_radius(SEXP, SEXP);
extern SEXP _euclid_create_circle_2_empty();
extern SEXP _euclid_create_exact_numeric(SEXP);
extern SEXP _euclid_create_point_2_empty();
extern SEXP _euclid_create_point_2_vec(SEXP);
extern SEXP _euclid_create_point_2_x_y(SEXP, SEXP);
extern SEXP _euclid_create_point_3_empty();
extern SEXP _euclid_create_point_3_vec(SEXP);
extern SEXP _euclid_create_point_3_x_y_z(SEXP, SEXP, SEXP);
extern SEXP _euclid_create_transform_2_identity(SEXP);
extern SEXP _euclid_create_transform_2_matrix(SEXP);
extern SEXP _euclid_create_transform_2_rotate(SEXP);
extern SEXP _euclid_create_transform_2_scale(SEXP);
extern SEXP _euclid_create_transform_2_translate(SEXP);
extern SEXP _euclid_create_transform_3_identity(SEXP);
extern SEXP _euclid_create_transform_3_matrix(SEXP);
extern SEXP _euclid_create_transform_3_scale(SEXP);
extern SEXP _euclid_create_transform_3_translate(SEXP);
extern SEXP _euclid_create_vector_2_empty();
extern SEXP _euclid_create_vector_2_point(SEXP);
extern SEXP _euclid_create_vector_2_x_y(SEXP, SEXP);
extern SEXP _euclid_create_vector_3_empty();
extern SEXP _euclid_create_vector_3_point(SEXP);
extern SEXP _euclid_create_vector_3_x_y_z(SEXP, SEXP, SEXP);
extern SEXP _euclid_exact_numeric_abs(SEXP);
extern SEXP _euclid_exact_numeric_any_duplicated(SEXP);
extern SEXP _euclid_exact_numeric_any_na(SEXP);
extern SEXP _euclid_exact_numeric_assign(SEXP, SEXP, SEXP);
extern SEXP _euclid_exact_numeric_combine(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_cummax(SEXP);
extern SEXP _euclid_exact_numeric_cummin(SEXP);
extern SEXP _euclid_exact_numeric_cumprod(SEXP);
extern SEXP _euclid_exact_numeric_cumsum(SEXP);
extern SEXP _euclid_exact_numeric_diff(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_divided(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_duplicated(SEXP);
extern SEXP _euclid_exact_numeric_greater(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_greater_equal(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_is_equal(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_is_na(SEXP);
extern SEXP _euclid_exact_numeric_is_not_equal(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_length(SEXP);
extern SEXP _euclid_exact_numeric_less(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_less_equal(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_match(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_max(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_min(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_minus(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_plus(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_prod(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_rank(SEXP);
extern SEXP _euclid_exact_numeric_sign(SEXP);
extern SEXP _euclid_exact_numeric_sort(SEXP, SEXP, SEXP);
extern SEXP _euclid_exact_numeric_subset(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_sum(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_times(SEXP, SEXP);
extern SEXP _euclid_exact_numeric_to_numeric(SEXP);
extern SEXP _euclid_exact_numeric_uni_minus(SEXP);
extern SEXP _euclid_exact_numeric_unique(SEXP);
extern SEXP _euclid_geometry_any_duplicated(SEXP);
extern SEXP _euclid_geometry_any_na(SEXP);
extern SEXP _euclid_geometry_assign(SEXP, SEXP, SEXP);
extern SEXP _euclid_geometry_bbox(SEXP);
extern SEXP _euclid_geometry_cardinality(SEXP);
extern SEXP _euclid_geometry_combine(SEXP, SEXP);
extern SEXP _euclid_geometry_copy(SEXP);
extern SEXP _euclid_geometry_definition(SEXP, SEXP, SEXP);
extern SEXP _euclid_geometry_definition_names(SEXP);
extern SEXP _euclid_geometry_dimension(SEXP);
extern SEXP _euclid_geometry_duplicated(SEXP);
extern SEXP _euclid_geometry_format(SEXP);
extern SEXP _euclid_geometry_is_degenerate(SEXP);
extern SEXP _euclid_geometry_is_equal(SEXP, SEXP);
extern SEXP _euclid_geometry_is_na(SEXP);
extern SEXP _euclid_geometry_is_not_equal(SEXP, SEXP);
extern SEXP _euclid_geometry_length(SEXP);
extern SEXP _euclid_geometry_match(SEXP, SEXP);
extern SEXP _euclid_geometry_subset(SEXP, SEXP);
extern SEXP _euclid_geometry_to_matrix(SEXP);
extern SEXP _euclid_geometry_transform(SEXP, SEXP);
extern SEXP _euclid_geometry_unique(SEXP);
extern SEXP _euclid_point_2_add_vector(SEXP, SEXP);
extern SEXP _euclid_point_2_coord(SEXP, SEXP);
extern SEXP _euclid_point_2_cummax(SEXP);
extern SEXP _euclid_point_2_cummin(SEXP);
extern SEXP _euclid_point_2_greater(SEXP, SEXP);
extern SEXP _euclid_point_2_greater_equal(SEXP, SEXP);
extern SEXP _euclid_point_2_less(SEXP, SEXP);
extern SEXP _euclid_point_2_less_equal(SEXP, SEXP);
extern SEXP _euclid_point_2_max(SEXP, SEXP);
extern SEXP _euclid_point_2_min(SEXP, SEXP);
extern SEXP _euclid_point_2_rank(SEXP);
extern SEXP _euclid_point_2_sort(SEXP, SEXP, SEXP);
extern SEXP _euclid_point_2_sub_point(SEXP, SEXP);
extern SEXP _euclid_point_2_sub_vector(SEXP, SEXP);
extern SEXP _euclid_point_3_add_vector(SEXP, SEXP);
extern SEXP _euclid_point_3_coord(SEXP, SEXP);
extern SEXP _euclid_point_3_cummax(SEXP);
extern SEXP _euclid_point_3_cummin(SEXP);
extern SEXP _euclid_point_3_greater(SEXP, SEXP);
extern SEXP _euclid_point_3_greater_equal(SEXP, SEXP);
extern SEXP _euclid_point_3_less(SEXP, SEXP);
extern SEXP _euclid_point_3_less_equal(SEXP, SEXP);
extern SEXP _euclid_point_3_max(SEXP, SEXP);
extern SEXP _euclid_point_3_min(SEXP, SEXP);
extern SEXP _euclid_point_3_rank(SEXP);
extern SEXP _euclid_point_3_sort(SEXP, SEXP, SEXP);
extern SEXP _euclid_point_3_sub_point(SEXP, SEXP);
extern SEXP _euclid_point_3_sub_vector(SEXP, SEXP);
extern SEXP _euclid_transform_any_duplicated(SEXP);
extern SEXP _euclid_transform_any_na(SEXP);
extern SEXP _euclid_transform_assign(SEXP, SEXP, SEXP);
extern SEXP _euclid_transform_combine(SEXP, SEXP);
extern SEXP _euclid_transform_copy(SEXP);
extern SEXP _euclid_transform_cumprod(SEXP);
extern SEXP _euclid_transform_definition(SEXP, SEXP, SEXP);
extern SEXP _euclid_transform_dimension(SEXP);
extern SEXP _euclid_transform_duplicated(SEXP);
extern SEXP _euclid_transform_format(SEXP);
extern SEXP _euclid_transform_inverse(SEXP);
extern SEXP _euclid_transform_is_equal(SEXP, SEXP);
extern SEXP _euclid_transform_is_na(SEXP);
extern SEXP _euclid_transform_is_not_equal(SEXP, SEXP);
extern SEXP _euclid_transform_is_reflecting(SEXP);
extern SEXP _euclid_transform_length(SEXP);
extern SEXP _euclid_transform_match(SEXP, SEXP);
extern SEXP _euclid_transform_multiply(SEXP, SEXP);
extern SEXP _euclid_transform_prod(SEXP, SEXP);
extern SEXP _euclid_transform_subset(SEXP, SEXP);
extern SEXP _euclid_transform_to_array(SEXP);
extern SEXP _euclid_transform_unique(SEXP);
extern SEXP _euclid_vector_2_add_vector(SEXP, SEXP);
extern SEXP _euclid_vector_2_coord(SEXP, SEXP);
extern SEXP _euclid_vector_2_cumsum(SEXP);
extern SEXP _euclid_vector_2_divide_numeric(SEXP, SEXP);
extern SEXP _euclid_vector_2_dot_vector(SEXP, SEXP);
extern SEXP _euclid_vector_2_minus_vector(SEXP, SEXP);
extern SEXP _euclid_vector_2_negate(SEXP);
extern SEXP _euclid_vector_2_sum(SEXP, SEXP);
extern SEXP _euclid_vector_2_times_numeric(SEXP, SEXP);
extern SEXP _euclid_vector_3_add_vector(SEXP, SEXP);
extern SEXP _euclid_vector_3_coord(SEXP, SEXP);
extern SEXP _euclid_vector_3_cumsum(SEXP);
extern SEXP _euclid_vector_3_divide_numeric(SEXP, SEXP);
extern SEXP _euclid_vector_3_dot_vector(SEXP, SEXP);
extern SEXP _euclid_vector_3_minus_vector(SEXP, SEXP);
extern SEXP _euclid_vector_3_negate(SEXP);
extern SEXP _euclid_vector_3_sum(SEXP, SEXP);
extern SEXP _euclid_vector_3_times_numeric(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_euclid_bbox_any_duplicated",           (DL_FUNC) &_euclid_bbox_any_duplicated,           1},
    {"_euclid_bbox_any_na",                   (DL_FUNC) &_euclid_bbox_any_na,                   1},
    {"_euclid_bbox_assign",                   (DL_FUNC) &_euclid_bbox_assign,                   3},
    {"_euclid_bbox_combine",                  (DL_FUNC) &_euclid_bbox_combine,                  2},
    {"_euclid_bbox_copy",                     (DL_FUNC) &_euclid_bbox_copy,                     1},
    {"_euclid_bbox_cumsum",                   (DL_FUNC) &_euclid_bbox_cumsum,                   1},
    {"_euclid_bbox_dimension",                (DL_FUNC) &_euclid_bbox_dimension,                1},
    {"_euclid_bbox_duplicated",               (DL_FUNC) &_euclid_bbox_duplicated,               1},
    {"_euclid_bbox_format",                   (DL_FUNC) &_euclid_bbox_format,                   1},
    {"_euclid_bbox_is_equal",                 (DL_FUNC) &_euclid_bbox_is_equal,                 2},
    {"_euclid_bbox_is_na",                    (DL_FUNC) &_euclid_bbox_is_na,                    1},
    {"_euclid_bbox_is_not_equal",             (DL_FUNC) &_euclid_bbox_is_not_equal,             2},
    {"_euclid_bbox_length",                   (DL_FUNC) &_euclid_bbox_length,                   1},
    {"_euclid_bbox_match",                    (DL_FUNC) &_euclid_bbox_match,                    2},
    {"_euclid_bbox_overlaps",                 (DL_FUNC) &_euclid_bbox_overlaps,                 2},
    {"_euclid_bbox_plus",                     (DL_FUNC) &_euclid_bbox_plus,                     2},
    {"_euclid_bbox_subset",                   (DL_FUNC) &_euclid_bbox_subset,                   2},
    {"_euclid_bbox_sum",                      (DL_FUNC) &_euclid_bbox_sum,                      2},
    {"_euclid_bbox_to_matrix",                (DL_FUNC) &_euclid_bbox_to_matrix,                1},
    {"_euclid_bbox_unique",                   (DL_FUNC) &_euclid_bbox_unique,                   1},
    {"_euclid_create_bbox_2",                 (DL_FUNC) &_euclid_create_bbox_2,                 4},
    {"_euclid_create_bbox_3",                 (DL_FUNC) &_euclid_create_bbox_3,                 6},
    {"_euclid_create_circle_2_2_point",       (DL_FUNC) &_euclid_create_circle_2_2_point,       2},
    {"_euclid_create_circle_2_3_point",       (DL_FUNC) &_euclid_create_circle_2_3_point,       3},
    {"_euclid_create_circle_2_center_radius", (DL_FUNC) &_euclid_create_circle_2_center_radius, 2},
    {"_euclid_create_circle_2_empty",         (DL_FUNC) &_euclid_create_circle_2_empty,         0},
    {"_euclid_create_exact_numeric",          (DL_FUNC) &_euclid_create_exact_numeric,          1},
    {"_euclid_create_point_2_empty",          (DL_FUNC) &_euclid_create_point_2_empty,          0},
    {"_euclid_create_point_2_vec",            (DL_FUNC) &_euclid_create_point_2_vec,            1},
    {"_euclid_create_point_2_x_y",            (DL_FUNC) &_euclid_create_point_2_x_y,            2},
    {"_euclid_create_point_3_empty",          (DL_FUNC) &_euclid_create_point_3_empty,          0},
    {"_euclid_create_point_3_vec",            (DL_FUNC) &_euclid_create_point_3_vec,            1},
    {"_euclid_create_point_3_x_y_z",          (DL_FUNC) &_euclid_create_point_3_x_y_z,          3},
    {"_euclid_create_transform_2_identity",   (DL_FUNC) &_euclid_create_transform_2_identity,   1},
    {"_euclid_create_transform_2_matrix",     (DL_FUNC) &_euclid_create_transform_2_matrix,     1},
    {"_euclid_create_transform_2_rotate",     (DL_FUNC) &_euclid_create_transform_2_rotate,     1},
    {"_euclid_create_transform_2_scale",      (DL_FUNC) &_euclid_create_transform_2_scale,      1},
    {"_euclid_create_transform_2_translate",  (DL_FUNC) &_euclid_create_transform_2_translate,  1},
    {"_euclid_create_transform_3_identity",   (DL_FUNC) &_euclid_create_transform_3_identity,   1},
    {"_euclid_create_transform_3_matrix",     (DL_FUNC) &_euclid_create_transform_3_matrix,     1},
    {"_euclid_create_transform_3_scale",      (DL_FUNC) &_euclid_create_transform_3_scale,      1},
    {"_euclid_create_transform_3_translate",  (DL_FUNC) &_euclid_create_transform_3_translate,  1},
    {"_euclid_create_vector_2_empty",         (DL_FUNC) &_euclid_create_vector_2_empty,         0},
    {"_euclid_create_vector_2_point",         (DL_FUNC) &_euclid_create_vector_2_point,         1},
    {"_euclid_create_vector_2_x_y",           (DL_FUNC) &_euclid_create_vector_2_x_y,           2},
    {"_euclid_create_vector_3_empty",         (DL_FUNC) &_euclid_create_vector_3_empty,         0},
    {"_euclid_create_vector_3_point",         (DL_FUNC) &_euclid_create_vector_3_point,         1},
    {"_euclid_create_vector_3_x_y_z",         (DL_FUNC) &_euclid_create_vector_3_x_y_z,         3},
    {"_euclid_exact_numeric_abs",             (DL_FUNC) &_euclid_exact_numeric_abs,             1},
    {"_euclid_exact_numeric_any_duplicated",  (DL_FUNC) &_euclid_exact_numeric_any_duplicated,  1},
    {"_euclid_exact_numeric_any_na",          (DL_FUNC) &_euclid_exact_numeric_any_na,          1},
    {"_euclid_exact_numeric_assign",          (DL_FUNC) &_euclid_exact_numeric_assign,          3},
    {"_euclid_exact_numeric_combine",         (DL_FUNC) &_euclid_exact_numeric_combine,         2},
    {"_euclid_exact_numeric_cummax",          (DL_FUNC) &_euclid_exact_numeric_cummax,          1},
    {"_euclid_exact_numeric_cummin",          (DL_FUNC) &_euclid_exact_numeric_cummin,          1},
    {"_euclid_exact_numeric_cumprod",         (DL_FUNC) &_euclid_exact_numeric_cumprod,         1},
    {"_euclid_exact_numeric_cumsum",          (DL_FUNC) &_euclid_exact_numeric_cumsum,          1},
    {"_euclid_exact_numeric_diff",            (DL_FUNC) &_euclid_exact_numeric_diff,            2},
    {"_euclid_exact_numeric_divided",         (DL_FUNC) &_euclid_exact_numeric_divided,         2},
    {"_euclid_exact_numeric_duplicated",      (DL_FUNC) &_euclid_exact_numeric_duplicated,      1},
    {"_euclid_exact_numeric_greater",         (DL_FUNC) &_euclid_exact_numeric_greater,         2},
    {"_euclid_exact_numeric_greater_equal",   (DL_FUNC) &_euclid_exact_numeric_greater_equal,   2},
    {"_euclid_exact_numeric_is_equal",        (DL_FUNC) &_euclid_exact_numeric_is_equal,        2},
    {"_euclid_exact_numeric_is_na",           (DL_FUNC) &_euclid_exact_numeric_is_na,           1},
    {"_euclid_exact_numeric_is_not_equal",    (DL_FUNC) &_euclid_exact_numeric_is_not_equal,    2},
    {"_euclid_exact_numeric_length",          (DL_FUNC) &_euclid_exact_numeric_length,          1},
    {"_euclid_exact_numeric_less",            (DL_FUNC) &_euclid_exact_numeric_less,            2},
    {"_euclid_exact_numeric_less_equal",      (DL_FUNC) &_euclid_exact_numeric_less_equal,      2},
    {"_euclid_exact_numeric_match",           (DL_FUNC) &_euclid_exact_numeric_match,           2},
    {"_euclid_exact_numeric_max",             (DL_FUNC) &_euclid_exact_numeric_max,             2},
    {"_euclid_exact_numeric_min",             (DL_FUNC) &_euclid_exact_numeric_min,             2},
    {"_euclid_exact_numeric_minus",           (DL_FUNC) &_euclid_exact_numeric_minus,           2},
    {"_euclid_exact_numeric_plus",            (DL_FUNC) &_euclid_exact_numeric_plus,            2},
    {"_euclid_exact_numeric_prod",            (DL_FUNC) &_euclid_exact_numeric_prod,            2},
    {"_euclid_exact_numeric_rank",            (DL_FUNC) &_euclid_exact_numeric_rank,            1},
    {"_euclid_exact_numeric_sign",            (DL_FUNC) &_euclid_exact_numeric_sign,            1},
    {"_euclid_exact_numeric_sort",            (DL_FUNC) &_euclid_exact_numeric_sort,            3},
    {"_euclid_exact_numeric_subset",          (DL_FUNC) &_euclid_exact_numeric_subset,          2},
    {"_euclid_exact_numeric_sum",             (DL_FUNC) &_euclid_exact_numeric_sum,             2},
    {"_euclid_exact_numeric_times",           (DL_FUNC) &_euclid_exact_numeric_times,           2},
    {"_euclid_exact_numeric_to_numeric",      (DL_FUNC) &_euclid_exact_numeric_to_numeric,      1},
    {"_euclid_exact_numeric_uni_minus",       (DL_FUNC) &_euclid_exact_numeric_uni_minus,       1},
    {"_euclid_exact_numeric_unique",          (DL_FUNC) &_euclid_exact_numeric_unique,          1},
    {"_euclid_geometry_any_duplicated",       (DL_FUNC) &_euclid_geometry_any_duplicated,       1},
    {"_euclid_geometry_any_na",               (DL_FUNC) &_euclid_geometry_any_na,               1},
    {"_euclid_geometry_assign",               (DL_FUNC) &_euclid_geometry_assign,               3},
    {"_euclid_geometry_bbox",                 (DL_FUNC) &_euclid_geometry_bbox,                 1},
    {"_euclid_geometry_cardinality",          (DL_FUNC) &_euclid_geometry_cardinality,          1},
    {"_euclid_geometry_combine",              (DL_FUNC) &_euclid_geometry_combine,              2},
    {"_euclid_geometry_copy",                 (DL_FUNC) &_euclid_geometry_copy,                 1},
    {"_euclid_geometry_definition",           (DL_FUNC) &_euclid_geometry_definition,           3},
    {"_euclid_geometry_definition_names",     (DL_FUNC) &_euclid_geometry_definition_names,     1},
    {"_euclid_geometry_dimension",            (DL_FUNC) &_euclid_geometry_dimension,            1},
    {"_euclid_geometry_duplicated",           (DL_FUNC) &_euclid_geometry_duplicated,           1},
    {"_euclid_geometry_format",               (DL_FUNC) &_euclid_geometry_format,               1},
    {"_euclid_geometry_is_degenerate",        (DL_FUNC) &_euclid_geometry_is_degenerate,        1},
    {"_euclid_geometry_is_equal",             (DL_FUNC) &_euclid_geometry_is_equal,             2},
    {"_euclid_geometry_is_na",                (DL_FUNC) &_euclid_geometry_is_na,                1},
    {"_euclid_geometry_is_not_equal",         (DL_FUNC) &_euclid_geometry_is_not_equal,         2},
    {"_euclid_geometry_length",               (DL_FUNC) &_euclid_geometry_length,               1},
    {"_euclid_geometry_match",                (DL_FUNC) &_euclid_geometry_match,                2},
    {"_euclid_geometry_subset",               (DL_FUNC) &_euclid_geometry_subset,               2},
    {"_euclid_geometry_to_matrix",            (DL_FUNC) &_euclid_geometry_to_matrix,            1},
    {"_euclid_geometry_transform",            (DL_FUNC) &_euclid_geometry_transform,            2},
    {"_euclid_geometry_unique",               (DL_FUNC) &_euclid_geometry_unique,               1},
    {"_euclid_point_2_add_vector",            (DL_FUNC) &_euclid_point_2_add_vector,            2},
    {"_euclid_point_2_coord",                 (DL_FUNC) &_euclid_point_2_coord,                 2},
    {"_euclid_point_2_cummax",                (DL_FUNC) &_euclid_point_2_cummax,                1},
    {"_euclid_point_2_cummin",                (DL_FUNC) &_euclid_point_2_cummin,                1},
    {"_euclid_point_2_greater",               (DL_FUNC) &_euclid_point_2_greater,               2},
    {"_euclid_point_2_greater_equal",         (DL_FUNC) &_euclid_point_2_greater_equal,         2},
    {"_euclid_point_2_less",                  (DL_FUNC) &_euclid_point_2_less,                  2},
    {"_euclid_point_2_less_equal",            (DL_FUNC) &_euclid_point_2_less_equal,            2},
    {"_euclid_point_2_max",                   (DL_FUNC) &_euclid_point_2_max,                   2},
    {"_euclid_point_2_min",                   (DL_FUNC) &_euclid_point_2_min,                   2},
    {"_euclid_point_2_rank",                  (DL_FUNC) &_euclid_point_2_rank,                  1},
    {"_euclid_point_2_sort",                  (DL_FUNC) &_euclid_point_2_sort,                  3},
    {"_euclid_point_2_sub_point",             (DL_FUNC) &_euclid_point_2_sub_point,             2},
    {"_euclid_point_2_sub_vector",            (DL_FUNC) &_euclid_point_2_sub_vector,            2},
    {"_euclid_point_3_add_vector",            (DL_FUNC) &_euclid_point_3_add_vector,            2},
    {"_euclid_point_3_coord",                 (DL_FUNC) &_euclid_point_3_coord,                 2},
    {"_euclid_point_3_cummax",                (DL_FUNC) &_euclid_point_3_cummax,                1},
    {"_euclid_point_3_cummin",                (DL_FUNC) &_euclid_point_3_cummin,                1},
    {"_euclid_point_3_greater",               (DL_FUNC) &_euclid_point_3_greater,               2},
    {"_euclid_point_3_greater_equal",         (DL_FUNC) &_euclid_point_3_greater_equal,         2},
    {"_euclid_point_3_less",                  (DL_FUNC) &_euclid_point_3_less,                  2},
    {"_euclid_point_3_less_equal",            (DL_FUNC) &_euclid_point_3_less_equal,            2},
    {"_euclid_point_3_max",                   (DL_FUNC) &_euclid_point_3_max,                   2},
    {"_euclid_point_3_min",                   (DL_FUNC) &_euclid_point_3_min,                   2},
    {"_euclid_point_3_rank",                  (DL_FUNC) &_euclid_point_3_rank,                  1},
    {"_euclid_point_3_sort",                  (DL_FUNC) &_euclid_point_3_sort,                  3},
    {"_euclid_point_3_sub_point",             (DL_FUNC) &_euclid_point_3_sub_point,             2},
    {"_euclid_point_3_sub_vector",            (DL_FUNC) &_euclid_point_3_sub_vector,            2},
    {"_euclid_transform_any_duplicated",      (DL_FUNC) &_euclid_transform_any_duplicated,      1},
    {"_euclid_transform_any_na",              (DL_FUNC) &_euclid_transform_any_na,              1},
    {"_euclid_transform_assign",              (DL_FUNC) &_euclid_transform_assign,              3},
    {"_euclid_transform_combine",             (DL_FUNC) &_euclid_transform_combine,             2},
    {"_euclid_transform_copy",                (DL_FUNC) &_euclid_transform_copy,                1},
    {"_euclid_transform_cumprod",             (DL_FUNC) &_euclid_transform_cumprod,             1},
    {"_euclid_transform_definition",          (DL_FUNC) &_euclid_transform_definition,          3},
    {"_euclid_transform_dimension",           (DL_FUNC) &_euclid_transform_dimension,           1},
    {"_euclid_transform_duplicated",          (DL_FUNC) &_euclid_transform_duplicated,          1},
    {"_euclid_transform_format",              (DL_FUNC) &_euclid_transform_format,              1},
    {"_euclid_transform_inverse",             (DL_FUNC) &_euclid_transform_inverse,             1},
    {"_euclid_transform_is_equal",            (DL_FUNC) &_euclid_transform_is_equal,            2},
    {"_euclid_transform_is_na",               (DL_FUNC) &_euclid_transform_is_na,               1},
    {"_euclid_transform_is_not_equal",        (DL_FUNC) &_euclid_transform_is_not_equal,        2},
    {"_euclid_transform_is_reflecting",       (DL_FUNC) &_euclid_transform_is_reflecting,       1},
    {"_euclid_transform_length",              (DL_FUNC) &_euclid_transform_length,              1},
    {"_euclid_transform_match",               (DL_FUNC) &_euclid_transform_match,               2},
    {"_euclid_transform_multiply",            (DL_FUNC) &_euclid_transform_multiply,            2},
    {"_euclid_transform_prod",                (DL_FUNC) &_euclid_transform_prod,                2},
    {"_euclid_transform_subset",              (DL_FUNC) &_euclid_transform_subset,              2},
    {"_euclid_transform_to_array",            (DL_FUNC) &_euclid_transform_to_array,            1},
    {"_euclid_transform_unique",              (DL_FUNC) &_euclid_transform_unique,              1},
    {"_euclid_vector_2_add_vector",           (DL_FUNC) &_euclid_vector_2_add_vector,           2},
    {"_euclid_vector_2_coord",                (DL_FUNC) &_euclid_vector_2_coord,                2},
    {"_euclid_vector_2_cumsum",               (DL_FUNC) &_euclid_vector_2_cumsum,               1},
    {"_euclid_vector_2_divide_numeric",       (DL_FUNC) &_euclid_vector_2_divide_numeric,       2},
    {"_euclid_vector_2_dot_vector",           (DL_FUNC) &_euclid_vector_2_dot_vector,           2},
    {"_euclid_vector_2_minus_vector",         (DL_FUNC) &_euclid_vector_2_minus_vector,         2},
    {"_euclid_vector_2_negate",               (DL_FUNC) &_euclid_vector_2_negate,               1},
    {"_euclid_vector_2_sum",                  (DL_FUNC) &_euclid_vector_2_sum,                  2},
    {"_euclid_vector_2_times_numeric",        (DL_FUNC) &_euclid_vector_2_times_numeric,        2},
    {"_euclid_vector_3_add_vector",           (DL_FUNC) &_euclid_vector_3_add_vector,           2},
    {"_euclid_vector_3_coord",                (DL_FUNC) &_euclid_vector_3_coord,                2},
    {"_euclid_vector_3_cumsum",               (DL_FUNC) &_euclid_vector_3_cumsum,               1},
    {"_euclid_vector_3_divide_numeric",       (DL_FUNC) &_euclid_vector_3_divide_numeric,       2},
    {"_euclid_vector_3_dot_vector",           (DL_FUNC) &_euclid_vector_3_dot_vector,           2},
    {"_euclid_vector_3_minus_vector",         (DL_FUNC) &_euclid_vector_3_minus_vector,         2},
    {"_euclid_vector_3_negate",               (DL_FUNC) &_euclid_vector_3_negate,               1},
    {"_euclid_vector_3_sum",                  (DL_FUNC) &_euclid_vector_3_sum,                  2},
    {"_euclid_vector_3_times_numeric",        (DL_FUNC) &_euclid_vector_3_times_numeric,        2},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_euclid(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
